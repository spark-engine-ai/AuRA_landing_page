{
    "DemandAnalysis": {
        "assistant_role_name": "Chief Product Officer",
        "user_role_name": "Chief Executive Officer",
        "phase_prompt": [
            "ChatDev has made many web application projects",
            "As the {assistant_role}, to satisfy the new user's demand and the product should be realizable, you should keep discussing with me to decide which product modality do we want the product to be?",
            "Note that we must ONLY discuss the product modality and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion unanimously, any of us must actively terminate the discussion by replying with only one line, which starts with a single word <INFO>, followed by our final product modality without any other words, e.g., \"<INFO> PowerPoint\"."
        ]
    },
    "LanguageChoose": {
        "assistant_role_name": "Chief Technology Officer",
        "user_role_name": "Chief Executive Officer",
        "phase_prompt": [
            "According to the new user's task and some creative brainstorm ideas listed below: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Ideas: \"{ideas}\".",
            "We have decided to complete the task through a executable webapplication implemented via a programming language. ",
            "As the {assistant_role}, to satisfy the new user's demand and make the webapplication realizable, you should propose the programming language of React JS with Tailwind UI kit classes and TypeScript along with the react-icons library.",
            "Note that we must ONLY discuss the target programming language and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion unanimously, any of us must actively terminate the discussion and conclude the best programming language we have discussed without any other words or reasons, return only one line using the format: \"<INFO> *\" where \"*\" represents a programming language."
        ]
    },
    "Coding": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Chief Technology Officer",
        "phase_prompt": [
            "According to the new user's task and our webapplication designs listed below: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Ideas:\"{ideas}\"",
            "We have decided to complete the task through a executable webapplication with multiple files implemented via {language}. As the {assistant_role}, to satisfy the new user's demands, you should write one or multiple files and make sure that every detail of the architecture is, in the end, implemented as code. {gui}",
            "Think step by step and reason yourself to the right decisions to make sure we get it right. Account for as many components as possible to build a beautiful application.",
            "You will be put inside the components folder. Keep in mind the pages/index.tsx file is already available and imports components/main.tsx so do not make any index file.",
            "You will first lay out the names of the core functions as well as list as many components that will be necessary, and also comment on their purpose.",
            "Then you will output the content of each file with complete code. Each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, and \"CODE\" is the original code:",
            "FILENAME",
            "```LANGUAGE",
            "CODE",
            "```",
            "You will start with the \"main\" file to first import the other files that you will make. The \"main\" file is where all the main components link to (components can still import other components though)",
            "Please note that the code should be fully functional, with no comments in the files and all components should have a highly detailed responsive UI design using many Tailwind UI kit classes, React JS and TypeScript using lorem ipsum filler content unless specified.",
            "Ensure to implement all functions and you must use things like border radius, subtle box shadows, borders, gradients etc. to build beautiful UI."
        ]
    },
    "ArtDesign": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Chief Creative Officer",
        "phase_prompt": [
            "Our developed source codes and corresponding test reports are listed below: ",
            "Task: \"{task}\".",
            "Programming Language: \"{language}\"",
            "Source Codes:",
            "\"{codes}\"",
            "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, and \"CODE\" is the original code:",
            "FILENAME",
            "```LANGUAGE",
            "CODE",
            "```",
            "As the {assistant_role}, to satisfy the new user's demand and equip the webapplication with a beautiful graphical user interface (GUI), we will discuss and design many decorative images for GUI decoration. Now, we keep discussing the GUI beautification by listing some functionally independent elements in GUI that are being considered to be decorated by different pictures. For example, ten digits (0-9) in a calculator are functionally independent.",
            "To answer, use the format: \" FILENAME.png: DESCRIPTION\" where \"FILENAME\" is the filename of the image and \"DESCRIPTION\" denotes the detailed description of the independent elements. For example:",
            "'''",
            "button_1.png: The button with the number \"1\" on it.",
            "button_multiply.png: The button with the multiplication symbol (\"*\") on it.",
            "background.png: the background color to decorate the Go game",
            "'''",
            "Now, list all functionally independent elements as much as possible."
        ]
    },
    "ArtIntegration": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Chief Creative Officer",
        "phase_prompt": [
            "Our developed source codes and corresponding test reports are listed below: ",
            "Task: \"{task}\".",
            "Programming Language: \"{language}\"",
            "Source Codes:",
            "\"{codes}\"",
            "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, and \"CODE\" is the original code:",
            "FILENAME",
            "```LANGUAGE",
            "CODE",
            "```",
            "As the {assistant_role}, to satisfy the new user's demand and equip the webapplication with a beautiful graphical user interface (GUI), you will incorporate our designed images for GUI decoration. Here are some ready-made high-quality pictures and corresponding descriptions:",
            "{images}",
            "Note that the designed images have a fixed size of 256x256 pixels and the images are located in the same directory as all the Python files; please dynamically scaling these images according to the size of GUI, and use \"self.*\" to avoid displaying-related problems caused by automatic garbage collection. For example:",
            "```",
            "self.image = ImageTk.PhotoImage(Image.open(\"./image.png\").resize((50, 50)))",
            "```",
            "Now, use some or all of the pictures into the GUI to make it more beautiful and creative. Output codes strictly following the required format mentioned above."
        ]
    },
    "CodeComplete": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Chief Technology Officer",
        "phase_prompt": [
            "According to the new user's task and our webapplication designs listed below: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Codes:",
            "\"{codes}\"",
            "Unimplemented File:",
            "\"{unimplemented_file}\"",
            "In our webapplication, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, and \"CODE\" is the original code:",
            "FILENAME",
            "```LANGUAGE",
            "CODE",
            "```",
            "As the {assistant_role}, to satisfy the complete function of our developed webapplication, you have to implement all methods in the {unimplemented_file} file which contains a unimplemented class. Now, implement all methods of the {unimplemented_file} and all other codes needed, then output the fully implemented codes, strictly following the required format.",
            "You must make sure to use as much detail as possible using Tailwind UI kit classes and the react-icons library. Use stuff like border radius, subtle box shadows, borders, gradients etc."
        ]
    },
    "CodeReviewComment": {
        "assistant_role_name": "Code Reviewer",
        "user_role_name": "Programmer",
        "phase_prompt": [
            "According to the new user's task and our webapplication designs: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Ideas: \"{ideas}\"",
            "Codes:",
            "\"{codes}\"",
            "As the {assistant_role}, to make the webapplication directly operable without further coding, ChatDev have formulated the following regulations:",
            "1) all referenced classes should be imported;",
            "2) all methods should be implemented;",
            "3) every tag in every component uses Tailwind UI kit classes classes for very high quality styling and is as detailed as possible with the most styling for the best ui results",
            "4) no potential bugs;",
            "5) All the components are imported correctly;",
            "6) most importantly, do not only check the errors in the code, but also the logic of code. Make sure that user can interact with generated webapplication without losing any feature in the requirement;",
            "Now, you should check the above regulations one by one and review the codes in detail, propose one comment with the highest priority about the codes, and give me instructions on how to fix. Tell me your comment with the highest priority and corresponding suggestions on revision. If the codes are perfect and you have no comment on them, return only one line like \"<INFO> Finished\"."
        ]
    },
    "CodeReviewModification": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Code Reviewer",
        "phase_prompt": [
            "According to the new user's task, our designed product modality, languages and ideas, our developed first-edition source codes are listed below: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Ideas: \"{ideas}\"",
            "Codes: ",
            "\"{codes}\"",
            "Comments on Codes:",
            "\"{comments}\"",
            "In the webapplication, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, and \"CODE\" is the original code. Format:",
            "FILENAME",
            "```LANGUAGE",
            "CODE",
            "```",
            "As the {assistant_role}, to satisfy the new user's demand and make the webapplication creative, executive and robust, you should modify corresponding codes according to the comments. Then, output the full and complete codes with all bugs fixed based on the comments. Return all codes strictly following the required format."
        ]
    },
    "CodeReviewHuman": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Code Reviewer",
        "phase_prompt": [
            "According to the new user's task, our designed product modality and three creative ideas, our developed first-edition source codes are listed below: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Ideas: \"{ideas}\"",
            "Codes: ",
            "\"{codes}\"",
            "Comments on Codes:",
            "\"{comments}\"",
            "In the webapplication, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, and \"CODE\" is the original code. Format:",
            "FILENAME",
            "```LANGUAGE",
            "CODE",
            "```",
            "As the {assistant_role}, to satisfy the new user's demand and make the webapplication creative, executive and robust, you should modify corresponding codes according to the comments. Then, output the full and complete codes with all bugs fixed based on the comments. Return all codes strictly following the required format."
        ]
    },
    "TestErrorSummary": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Software Test Engineer",
        "phase_prompt": [
            "Our developed source codes and corresponding test reports are listed below: ",
            "Programming Language: \"{language}\"",
            "Source Codes:",
            "\"{codes}\"",
            "Test Reports of Source Codes:",
            "\"{test_reports}\"",
            "According to my test reports, please locate and summarize the bugs that cause the problem."
        ]
    },
    "TestModification": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Software Test Engineer",
        "phase_prompt": [
            "Our developed source codes and corresponding test reports are listed below: ",
            "Programming Language: \"{language}\"",
            "Source Codes:",
            "\"{codes}\"",
            "Test Reports of Source Codes:",
            "\"{test_reports}\"",
            "Error Summary of Test Reports:",
            "\"{error_summary}\"",
            "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, and \"CODE\" is the original code:",
            "FILENAME",
            "```LANGUAGE",
            "CODE",
            "```",
            "As the {assistant_role}, to satisfy the new user's demand and make the webapplication execute smoothly and robustly, you should modify the codes based on the error summary. Now, use the format exemplified above and modify the problematic codes based on the error summary. Output the codes that you fixed based on the test reported and corresponding explanations (strictly follow the format defined above, including FILENAME, LANGUAGE, DOCSTRING and CODE; incomplete \"TODO\" codes are strictly prohibited). If no bugs are reported, please return only one line like \"<INFO> Finished\"."
        ]
    },
    "EnvironmentDoc": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Chief Technology Officer",
        "phase_prompt": [
            "The new user's task and our developed codes are listed: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Ideas: \"{ideas}\"",
            "Codes: ",
            "\"{codes}\"",
            "As the {assistant_role}, you should write a package.json file, which is commonly used in React projects to specify the dependencies or packages required for the project to run properly. It serves as a way to document and manage the project's dependencies in a standardized format. For example:",
            "package.json",
            "```",
            "numpy==1.19.2",
            "pandas>=1.1.4",
            "```",
            "According to the codes and file format listed above, write a package.json file to specify the dependencies or packages required for the project to run properly."
        ]
    },
    "Manual": {
        "assistant_role_name": "Chief Product Officer",
        "user_role_name": "Chief Executive Officer",
        "phase_prompt": [
            "The new user's task, our developed codes and required dependencies are listed: ",
            "Task: \"{task}\".",
            "Modality: \"{modality}\".",
            "Programming Language: \"{language}\"",
            "Ideas: \"{ideas}\"",
            "Codes: ",
            "\"{codes}\"",
            "Requirements:",
            "\"{requirements}\"",
            "As the {assistant_role}, by using Markdown, you should write a manual.md file which is a detailed user manual to use the webapplication, including introducing main functions of the webapplication, how to install environment dependencies and how to use/play it. For example:",
            "manual.md",
            "```",
            "# LangChain",
            "Building applications with LLMs through composability",
            "Looking for the JS/TS version? Check out LangChain.js.",
            "**Production Support:** As you move your LangChains into production, we'd love to offer more comprehensive support.",
            "Please fill out this form and we'll set up a dedicated support Slack channel.",
            "## Quick Install",
            "`pip install langchain`",
            "or",
            "`conda install langchain -c conda-forge`",
            "## \ud83e\udd14 What is this?",
            "Large language models (LLMs) are emerging as a transformative technology, enabling developers to build applications that they previously could not. However, using these LLMs in isolation is often insufficient for creating a truly powerful app - the real power comes when you can combine them with other sources of computation or knowledge.",
            "This library aims to assist in the development of those types of applications. Common examples of these applications include:",
            "**\u2753 Question Answering over specific documents**",
            "- Documentation",
            "- End-to-end Example: Question Answering over Notion Database",
            "**\ud83e\udd16 Agents**",
            "- Documentation",
            "- End-to-end Example: GPT+WolframAlpha",
            "## \ud83d\udcd6 Documentation",
            "Please see [here](https://python.langchain.com) for full documentation on:",
            "- Getting started (installation, setting up the environment, simple examples)",
            "- How-To examples (demos, integrations, helper functions)",
            "- Reference (full API docs)",
            "- Resources (high-level explanation of core concepts)",
            "```"
        ]
    }
}